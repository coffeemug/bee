#!/usr/local/bin/python3
import configparser

import os
import sys
import math
from pprint import pprint
from textwrap import wrap
from datetime import time as dt_time
from datetime import datetime, timedelta
from time import time
from json import loads
from urllib.parse import urlencode
from urllib.request import urlopen
from sys import argv, exit
from termcolor import cprint

config_path = os.path.join(os.path.expanduser('~'),'.beerc')
auth_token = None

# Date management
def infer_date(ts):
    if not (type(ts) is datetime):
        dt = datetime.fromtimestamp(ts)
    else:
        dt = ts
    if dt < datetime.combine(dt, dt_time(4,0,0)):
        dt += timedelta(days=-1)
    return dt.date()

def todayp(dt):
    return infer_date(dt) == infer_date(datetime.today())
def tomorrowp(dt):
    return infer_date(dt) == infer_date(datetime.today() + timedelta(days=1))
def thereafterp(dt):
    return infer_date(dt) > infer_date(datetime.today() + timedelta(days=1))

def daysleft(dt):
    return (infer_date(dt) - infer_date(datetime.today())).days
    
# Config management
def load_auth_token():
    global auth_token
    dict1 = {}
    section = 'account'
    Config = configparser.ConfigParser()
    Config.read(config_path)
    options = Config.options(section)
    for option in options:
        try:
            dict1[option] = Config.get(section, option)
            if dict1[option] == -1:
                DebugPrint("skip: %s" % option)
        except:
            print("exception on %s!" % option)
            dict1[option] = None

    try:
        auth_token = dict1['auth_token']
    except (KeyError, configparser.NoSectionError):
        print('Error: Missing or malformed configuration file.\n')
        print('Please go to https://www.beeminder.com/api/v1/auth_token.json')
        print('Then create a ~/.beerc file like this:\n')

        print('[account]')
        print('auth_token: <your auth_token>')
        exit(1)

def print_summary():
    data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals.json?auth_token=%s' % (auth_token)).read().decode('utf-8'))

    parsed = sorted(data,key=lambda data:abs(data['losedate']))

    today = [x for x in parsed if todayp(x['losedate'])]
    tomorrow = [x for x in parsed if tomorrowp(x['losedate'])]
    thereafter = [x for x in parsed if thereafterp(x['losedate'])]

    colors = ['red', 'blue', 'green']

    output = []
    combined_goals = [today, tomorrow, thereafter]
    for x in list(range(0,3)):
        goals = combined_goals[x]
        for i in goals:
            baremin = float(i['baremin'])
            if baremin > 0:
                baremin = '+'+str(math.ceil(baremin))
            else:
                baremin = '-'+str(math.ceil(baremin))
            line = {
                'day': x,
                'pledge': '$' + str(int(i['pledge'])),
                'name': i['slug'],
                'baremin': baremin,
                'daysleft': daysleft(int(i['losedate'])),
                'comment': i['last_datapoint']['comment']
            }
            output.append(line)
        if len(output) == 0:
            output.append({'day': x, 'name': ''})

    col_width = max([len(i['name']) for i in output]) + 1
    for x in output:
        if 'pledge' in x:
            when = ('(%s)' % x['daysleft'] if x['day'] >= 2 else '')
            fmt = ''.join([x['pledge'].ljust(4),
                           x['name'].ljust(col_width),
                           x['baremin'].ljust(4),
                           when.ljust(8),
                           x['comment']])
        else:
            fmt = 'Nothing here'
        cprint(fmt, colors[x['day']])
    sys.stdout.write('\033[0m')
    
    print()

def submit_update():
    goal = argv[1]
    
    post = dict()
    post['auth_token'] = auth_token
    post['timestamp'] = round(time())
    post['value'] = argv[2]
    if len(argv)>3:
        post['comment'] = ' '.join(argv[3:])

    params = urlencode(post)
    params = params.encode('utf-8')

    data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals/%s/datapoints.json' % goal, params).read().decode('utf-8'))
    pprint(data)

load_auth_token()
# output for running "bmndr"
if len(argv) == 1:
    print_summary()
# output for running "bmndr <goal> <data> <comment>"
else:
    submit_update()
