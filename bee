#!/usr/local/bin/python3
import os
import sys
import math
import configparser
from pprint import pprint
from textwrap import wrap
from datetime import time as dt_time
from datetime import datetime, timedelta
from time import time
from json import loads
from urllib.parse import urlencode
from urllib.request import urlopen
from sys import argv, exit
from termcolor import cprint, colored
import re

config_path = os.path.join(os.path.expanduser('~'),'.beerc')
auth_token = None

# Date management
def infer_date(ts):
    if not (type(ts) is datetime):
        dt = datetime.fromtimestamp(ts)
    else:
        dt = ts
    if dt < datetime.combine(dt, dt_time(4,0,0)):
        dt += timedelta(days=-1)
    return dt.date()

def todayp(dt):
    return infer_date(dt) == infer_date(datetime.today())
def tomorrowp(dt):
    return infer_date(dt) == infer_date(datetime.today() + timedelta(days=1))
def thereafterp(dt):
    return infer_date(dt) > infer_date(datetime.today() + timedelta(days=1))

def daysleft(dt):
    return (infer_date(dt) - infer_date(datetime.today())).days
    
# Config management
def missing_config():
    print('Error: Missing or malformed configuration file.\n')
    print('Please go to https://www.beeminder.com/api/v1/auth_token.json')
    print('Then create a ~/.beerc file like this:\n')

    print('[account]')
    print('auth_token: <your auth_token>')
    exit(1)

def load_auth_token():
    global auth_token
    dict1 = {}
    section = 'account'
    Config = configparser.ConfigParser()
    Config.read(config_path)
    try:
        options = Config.options(section)
    except:
        missing_config()
    for option in options:
        try:
            dict1[option] = Config.get(section, option)
            if dict1[option] == -1:
                DebugPrint("skip: %s" % option)
        except:
            print("exception on %s!" % option)
            dict1[option] = None

    try:
        auth_token = dict1['auth_token']
    except (KeyError, configparser.NoSectionError):
        missing_config()

def report():
    data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals.json?auth_token=%s' % (auth_token)).read().decode('utf-8'))

    items = []
    for i in data:
        baremin = float(i['baremin'])
        if baremin > 0:
            baremin = '+'+str(math.ceil(baremin))
        else:
            baremin = '-'+str(math.ceil(baremin))
        line = {
            'pledge': '$' + str(int(i['pledge'])),
            'name': i['slug'],
            'baremin': baremin,
            'daysleft': daysleft(int(i['losedate'])),
            'comment': i['last_datapoint']['comment'],
            'rate': i['rate'],
            'daily': i['runits'] == 'd',
        }
        items.append(line)
    extended = [x for x in items if not x['daily'] or x['rate'] > 5]
    extended = sorted(extended, key=lambda x: x['daysleft'])
    extended_first = [x for x in extended if x['daysleft'] == 0]
    extended_rest = [x for x in extended if x['daysleft'] != 0]
    daily = [x for x in items if x not in extended]
    
    print_extended(extended_first)
    print_daily(daily)
    print_extended(extended_rest)
    print()

def print_extended(goals):
    if len(goals) == 0:
        return
    colors = ['red', 'blue', 'green']
    col_width = max([len(i['name']) for i in goals]) + 1
    for x in goals:
        when = '(%s)' % x['daysleft'] if x['daysleft'] >= 2 else ''
        fmt = ''.join([x['pledge'].ljust(4),
                       x['name'].ljust(col_width),
                       x['baremin'].ljust(4),
                       when.ljust(8),
                       x['comment']])
        cprint(fmt, colors[min(x['daysleft'], len(colors) - 1)])

def print_daily(goals):
    output = []
    for x in goals:
        rate = math.ceil(x['rate'])
        baremin = math.ceil(float(x['baremin']))
        output.append({
            'initial': x['name'][0],
            'nexpected': rate,
            'ndone': rate if x['daysleft'] > 0 else rate - baremin,
            'daysleft': x['daysleft']
        })
        
    output = sorted(output, key=lambda x: -x['nexpected'])
    daily_done_p = sum([i['nexpected'] for i in output]) == sum([i['ndone'] for i in output])

    if daily_done_p:
        sys.stdout.write(colored('->  ', 'green', attrs=['dark']))
    else:
        sys.stdout.write(colored('->  ', 'red'))
    for i in output:
        done = i['ndone']
        left = i['nexpected'] - i['ndone']
        if left == 0:
            sys.stdout.write(colored(i['initial'], 'green', attrs=['dark']))
            sys.stdout.write(colored('\u2713' * done, 'green', attrs=['dark']))
        else:
            sys.stdout.write(colored(i['initial'], 'red'))
            sys.stdout.write(colored('\u2713' * done, 'red'))
            sys.stdout.write('\u2713' * left)
        sys.stdout.write(' ')
    print()

def read_abs_from_comment(goal):
    data = loads(urlopen("https://www.beeminder.com/api/v1/users/me/goals/%s.json?auth_token=%s" % (goal, auth_token)).read().decode('utf-8'))
    comment = data['last_datapoint']['comment']
    
    last_val = re.search('\\d+$', comment)
    if last_val:
        last_val = last_val.group(0)
    else:
        last_val = 1
    return int(last_val)
    
def update():
    goal = argv[1]
    new_val = argv[2]
    if argv[2].startswith('@'):
        # user reported absolute value, convert to delta
        last_val = read_abs_from_comment(goal)
        new_val = int(argv[2][1:])
        if new_val > last_val:
            new_val = new_val - last_val + 1
        elif new_val == last_val:
            new_val = 0
        new_val = str(new_val)
    
    post = dict()
    post['auth_token'] = auth_token
    post['timestamp'] = round(time())
    post['value'] = new_val
    if len(argv)>3:
        post['comment'] = ' '.join(argv[3:])
    elif argv[2].startswith('@'):
        post['comment'] = "on page %s" % argv[2][1:]

    params = urlencode(post)
    params = params.encode('utf-8')

    data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals/%s/datapoints.json' % goal, params).read().decode('utf-8'))
    pprint(data)

load_auth_token()
# output for running "bmndr"
if len(argv) == 1:
    report()
# output for running "bmndr <goal> <data> <comment>"
else:
    update()
